{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport noteService from \"../services/notes\"; // const generateId = () => Number((Math.random() * 1000000).toFixed(0));\n\nconst noteSlice = createSlice({\n  name: \"notes\",\n  initialState: [],\n  reducers: {\n    createNote(state, action) {\n      state.push(action.payload);\n    },\n\n    toggleImportanceOf(state, action) {\n      const id = action.payload;\n      const noteToChange = state.find(n => n.id === id);\n      const changedNote = { ...noteToChange,\n        important: !noteToChange.important\n      };\n      return state.map(note => note.id !== id ? note : changedNote);\n    },\n\n    appendNote(state, action) {\n      state.push(action.payload);\n    },\n\n    setNotes(state, action) {\n      return action.payload;\n    }\n\n  }\n});\nexport const initializeNotes = () => {\n  return async dispatch => {\n    const notes = await noteService.getAll();\n    dispatch(setNotes(notes));\n  };\n};\nexport const {\n  createNote,\n  toggleImportanceOf,\n  appendNote,\n  setNotes\n} = noteSlice.actions;\nexport default noteSlice.reducer;","map":{"version":3,"names":["createSlice","noteService","noteSlice","name","initialState","reducers","createNote","state","action","push","payload","toggleImportanceOf","id","noteToChange","find","n","changedNote","important","map","note","appendNote","setNotes","initializeNotes","dispatch","notes","getAll","actions","reducer"],"sources":["/home/lazy/Desktop/Redux-Part6/redux-note/src/reducers/noteReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport noteService from \"../services/notes\";\n\n// const generateId = () => Number((Math.random() * 1000000).toFixed(0));\nconst noteSlice = createSlice({\n  name: \"notes\",\n  initialState: [],\n  reducers: {\n    createNote(state, action) {\n      state.push(action.payload);\n    },\n\n    toggleImportanceOf(state, action) {\n      const id = action.payload;\n      const noteToChange = state.find((n) => n.id === id);\n      const changedNote = {\n        ...noteToChange,\n        important: !noteToChange.important,\n      };\n      return state.map((note) => (note.id !== id ? note : changedNote));\n    },\n    appendNote(state, action) {\n      state.push(action.payload);\n    },\n    setNotes(state, action) {\n      return action.payload;\n    },\n  },\n});\nexport const initializeNotes = () => {\n  return async (dispatch) => {\n    const notes = await noteService.getAll();\n    dispatch(setNotes(notes));\n  };\n};\nexport const { createNote, toggleImportanceOf, appendNote, setNotes } =\n  noteSlice.actions;\n\nexport default noteSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,WAAP,MAAwB,mBAAxB,C,CAEA;;AACA,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC5BG,IAAI,EAAE,OADsB;EAE5BC,YAAY,EAAE,EAFc;EAG5BC,QAAQ,EAAE;IACRC,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;MACxBD,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;IACD,CAHO;;IAKRC,kBAAkB,CAACJ,KAAD,EAAQC,MAAR,EAAgB;MAChC,MAAMI,EAAE,GAAGJ,MAAM,CAACE,OAAlB;MACA,MAAMG,YAAY,GAAGN,KAAK,CAACO,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACH,EAAF,KAASA,EAA3B,CAArB;MACA,MAAMI,WAAW,GAAG,EAClB,GAAGH,YADe;QAElBI,SAAS,EAAE,CAACJ,YAAY,CAACI;MAFP,CAApB;MAIA,OAAOV,KAAK,CAACW,GAAN,CAAWC,IAAD,IAAWA,IAAI,CAACP,EAAL,KAAYA,EAAZ,GAAiBO,IAAjB,GAAwBH,WAA7C,CAAP;IACD,CAbO;;IAcRI,UAAU,CAACb,KAAD,EAAQC,MAAR,EAAgB;MACxBD,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;IACD,CAhBO;;IAiBRW,QAAQ,CAACd,KAAD,EAAQC,MAAR,EAAgB;MACtB,OAAOA,MAAM,CAACE,OAAd;IACD;;EAnBO;AAHkB,CAAD,CAA7B;AAyBA,OAAO,MAAMY,eAAe,GAAG,MAAM;EACnC,OAAO,MAAOC,QAAP,IAAoB;IACzB,MAAMC,KAAK,GAAG,MAAMvB,WAAW,CAACwB,MAAZ,EAApB;IACAF,QAAQ,CAACF,QAAQ,CAACG,KAAD,CAAT,CAAR;EACD,CAHD;AAID,CALM;AAMP,OAAO,MAAM;EAAElB,UAAF;EAAcK,kBAAd;EAAkCS,UAAlC;EAA8CC;AAA9C,IACXnB,SAAS,CAACwB,OADL;AAGP,eAAexB,SAAS,CAACyB,OAAzB"},"metadata":{},"sourceType":"module"}